# Load necessary libraries
library(dplyr)
library(randomForest)
library(nnet)

# Define paths for output files
output_rf <- "FULLrandomForest500_em05.txt"
output_nnet <- "FULLnnet500_em05.txt"

# Main loop to run simulations and apply both methods
for (i in 1:2) {
  # Generate data
  TNDdat <- datagen(ssize = 500, em = 0.5)

  # Fit models using Random Forest
  res_rf <- element.randomForest(TNDdat)

  # Fit models using Neural Network
  res_nnet <- element.nnet(TNDdat)

  # Random Forest Results
  est_rf <- mod_IPW(TNDdat, res_rf)
  est1_rf <- est_rf$est
  se1_rf <- est_rf$se
  CI1_rf <- est_rf$CI

  est2_rf <- mod_OutReg(TNDdat, res_rf)$est1
  est3_rf <- mod_OutReg(TNDdat, res_rf)$est2

  est4_rf <- mod_EIF1OUT(TNDdat, res_rf)
  est4_rf_val <- est4_rf$est
  OUTvarln_rf <- est4_rf$varln
  OUTvar_rf <- est4_rf$var
  CI4_rf <- est4_rf$CI1

  est5_rf <- mod_EIF1PS(TNDdat, res_rf)
  est5_rf_val <- est5_rf$est
  PSvarln_rf <- est5_rf$varln
  PSvar_rf <- est5_rf$var
  CI5_rf <- est5_rf$CI1

  est6_rf <- mod_EIF2(TNDdat, res_rf)
  est6_rf_val <- est6_rf$est
  varln_rf <- est6_rf$varln
  var_rf <- est6_rf$var
  CI6_rf <- est6_rf$CI1
  CI7_rf <- est6_rf$CI2

  # Save results for Random Forest
  write(
    c(
      i, est1_rf, CI1_rf, est2_rf, est3_rf, est4_rf_val, CI4_rf, est5_rf_val,
      CI5_rf, est6_rf_val, CI6_rf, CI7_rf, se1_rf, OUTvarln_rf, OUTvar_rf,
      PSvarln_rf, PSvar_rf, varln_rf, var_rf
    ),
    file = output_rf,
    ncolumns = 50,
    append = TRUE
  )

  # Neural Network Results
  est_nnet <- mod_IPW(TNDdat, res_nnet)
  est1_nnet <- est_nnet$est
  se1_nnet <- est_nnet$se
  CI1_nnet <- est_nnet$CI

  est2_nnet <- mod_OutReg(TNDdat, res_nnet)$est1
  est3_nnet <- mod_OutReg(TNDdat, res_nnet)$est2

  est4_nnet <- mod_EIF1OUT(TNDdat, res_nnet)
  est4_nnet_val <- est4_nnet$est
  OUTvarln_nnet <- est4_nnet$varln
  OUTvar_nnet <- est4_nnet$var
  CI4_nnet <- est4_nnet$CI1

  est5_nnet <- mod_EIF1PS(TNDdat, res_nnet)
  est5_nnet_val <- est5_nnet$est
  PSvarln_nnet <- est5_nnet$varln
  PSvar_nnet <- est5_nnet$var
  CI5_nnet <- est5_nnet$CI1

  est6_nnet <- mod_EIF2(TNDdat, res_nnet)
  est6_nnet_val <- est6_nnet$est
  varln_nnet <- est6_nnet$varln
  var_nnet <- est6_nnet$var
  CI6_nnet <- est6_nnet$CI1
  CI7_nnet <- est6_nnet$CI2

  # Save results for Neural Network
  write(
    c(
      i, est1_nnet, CI1_nnet, est2_nnet, est3_nnet, est4_nnet_val, CI4_nnet,
      est5_nnet_val, CI5_nnet, est6_nnet_val, CI6_nnet, CI7_nnet, se1_nnet,
      OUTvarln_nnet, OUTvar_nnet, PSvarln_nnet, PSvar_nnet, varln_nnet, var_nnet
    ),
    file = output_nnet,
    ncolumns = 50,
    append = TRUE
  )
}

# Read and process Random Forest results
res_rf <- read.table(output_rf, header = FALSE)
res_rf <- na.omit(res_rf)
colnames(res_rf)[c(1, 2, 5, 6, 7, 10, 13, 18, 23, 24)] <- c("i", "IPW", "out-Out", "out-PS", "EIF-out", "EIF-ps", "EIF", "Se-ipw", "Varln-EIF", "Var-EIF")
summary(res_rf, na.rm = FALSE)

# Define mean relative risk (mRR)
mRR <- 0.166
apply(res_rf, 2, mean) - mRR
apply(res_rf, 2, median) - mRR
apply(res_rf, 2, mean)
apply(res_rf, 2, median)
apply(res_rf, 2, sd)

# Confidence Intervals
psi <- mRR
mean(psi <= res_rf$V4 & psi >= res_rf$V3)
mean(psi <= res_rf$V9 & psi >= res_rf$V8)
mean(psi <= res_rf$V12 & psi >= res_rf$V11)
mean(psi <= res_rf$V15 & psi >= res_rf$V14)
mean(psi <= res_rf$V17 & psi >= res_rf$V16)

# Read and process Neural Network results
res_nnet <- read.table(output_nnet, header = FALSE)
res_nnet <- na.omit(res_nnet)
colnames(res_nnet)[c(1, 2, 5, 6, 7, 10, 13, 18, 23, 24)] <- c("i", "IPW", "out-Out", "out-PS", "EIF-out", "EIF-ps", "EIF", "Var-ipw", "Varln-EIF", "Var-EIF")
summary(res_nnet, na.rm = FALSE)

# Update mRR for Neural Network
mRR <- 0.263
apply(res_nnet, 2, mean) - mRR
apply(res_nnet, 2, median) - mRR
apply(res_nnet, 2, mean)
apply(res_nnet, 2, sd)

# Confidence Intervals
psi <- mRR
mean(psi <= res_nnet$V4 & psi >= res_nnet$V3)
mean(psi <= res_nnet$V9 & psi >= res_nnet$V8)
mean(psi <= res_nnet$V12 & psi >= res_nnet$V11)
mean(psi <= res_nnet$V15 & psi >= res_nnet$V14)
mean(psi <= res_nnet$V17 & psi >= res_nnet$V16)










# Integrated TND Data Generation Function
datagen <- function(seed = sample(1:1000000, size = 1),
                    ssize = 500, popsize = 1500000, OR_C = 4,
                    OR_W1 = 1, OR_W2 = 3.5, em = 0.5,
                    cfV0 = FALSE, cfV1 = FALSE, return_full = FALSE, co_inf_para = 0.00001) {
  set.seed(seed)

  # Generate confounders and covariates
  C <- runif(n = popsize, -3, 3)  # Continuous confounder
  U1 <- rbinom(n = popsize, size = 1, prob = 0.5)  # Unmeasured binary covariate
  U2 <- rbinom(n = popsize, size = 1, prob = 0.5)  # Unmeasured binary covariate

  # Generate Vaccination Status
  if (cfV0 == TRUE) {
    V <- rep(0, popsize)
  } else if (cfV1 == TRUE) {
    V <- rep(1, popsize)
  } else {
    V <- rbinom(n = popsize, size = 1, prob = plogis(1.5 + 0.3 * C - abs(C) - sin(pi * C)))
  }

  # Set independent baseline probabilities for infections
  p_I1 <- sqrt(co_inf_para)  # Marginal probability of I1
  p_I2 <- sqrt(co_inf_para)  # Marginal probability of I2

  # Convert to log-odds for logistic regression
  bsl_I1 <- qlogis(p_I1)
  bsl_I2 <- qlogis(p_I2)

  # Generate independent infections
  I1 <- rbinom(n = popsize, size = 1, prob = plogis(0.5 * C + bsl_I1 + 0.5 * U1))  # Infection with other viruses
  lambda_covid <- bsl_I2 + 2 * C + 2.5 * exp(C) -log(OR_C)*V + em * V * C + log(3) * U2 * (1.5 - V) - 2 * U1
  I2 <- rbinom(n = popsize, size = 1, prob = plogis(lambda_covid))  # Infection with SARS-CoV-2

  # Calculate the percentage of co-infections
  co_inf <- sum(I1 == 1 & I2 == 1)
  per_co_inf <- co_inf / popsize * 100

  # Generate symptoms W1 and W2
  W1 <- rep(0, popsize)
  W1[I1 == 1] <- rbinom(
    n = sum(I1 == 1),
    size = 1,
    prob = plogis(2 + 0.5 * C[I1 == 1] - log(OR_W1) * V[I1 == 1] - 0.5 * U1[I1 == 1])
  )

  W2 <- rep(0, popsize)
  W2[I2 == 1] <- rbinom(
    n = sum(I2 == 1),
    size = 1,
    prob = plogis(-5 + 1 * C[I2 == 1] - log(OR_W2) * V[I2 == 1] - 1 * U1[I2 == 1] + 0.5 * U2[I2 == 1] * (1 - V[I2 == 1]))
  )

  # Combine symptoms into a unified status
  W <- pmax(W1, W2)

  # Generate hospitalization status H1 and H2
  lambda_h1 <- ifelse(W1 == 1, 2 * C - 0.5 * U1, 0)
  lambda_h2 <- ifelse(W2 == 1, 2 * C - 0.5 * U1, 0)

  H1 <- rep(0, popsize)
  H1[W1 == 1] <- rbinom(
    n = sum(W1 == 1),
    size = 1,
    prob = plogis(lambda_h1[W1 == 1])
  )

  H2 <- rep(0, popsize)
  H2[W2 == 1] <- rbinom(
    n = sum(W2 == 1),
    size = 1,
    prob = plogis(lambda_h2[W2 == 1])
  )

  # Overall hospitalization status
  H <- pmax(H1, H2)

  # Selection on outcome for testing (hospitalization)
  R <- sample(which(H == 1), ssize, replace = TRUE)  # Sample randomly from those hospitalized

  if (return_full == FALSE) {
    dat <- as.data.frame(cbind(Y = I2, V = V, C = C)[R, ])
  } else {
    dat <- as.data.frame(cbind(Infec_COVID = I2, Infec = I1, H = H, W = W, V = V, C = C))
  }

  return(dat)
}

# Example of using the integrated function
set.seed(123)
test_data <- datagen(ssize = 500, popsize = 1500000, OR_C = 4, OR_W1 = 1, OR_W2 = 3.5, em = 0.5, co_inf_para = 0.00001)
head(test_data)



orvect<-rep(NA,50)
for (j in 1:50){
  datfull1<-datagen(cfV1=T,return_full=T)
  datfull0<-datagen(cfV0=T,return_full=T)
  orvect[j]<-mean(datfull1$H*datfull1$Infec_COVID)/mean(datfull0$H*datfull0$Infec_COVID)
}
(psi = mean(orvect)) #0.04209
hist(orvect)

#true marginal RR for Infec_COVID
orvect1<-rep(NA,50)
for (j in 1:50){
  datfull1<-datagen(cfV1=T,return_full=T)
  datfull0<-datagen(cfV0=T,return_full=T)
  orvect1[j]<-mean(datfull1$Infec_COVID)/mean(datfull0$Infec_COVID)
}
mean(orvect1) #0.16
hist(orvect1)
